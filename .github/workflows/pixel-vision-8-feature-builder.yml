name: Pixel Vision 8

on:
  push:
    branches: 'v**'

jobs:

  # This runs before the builds and cretes the new feature release
  create-release:

    name: "Create Release"
    runs-on: "ubuntu-latest"

    # Steps for the task
    steps:

      # Figure out what the next tag should be
      - id: compute_tag
        uses: craig-day/compute-tag@v10
        with:
          github_token: ${{ github.token }}
          version_scheme: semantic
          version_type: patch

      # Create the new release tag based on the above tag value and pass in the generated change log
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.compute_tag.outputs.next_tag }}
          release_name: Pixel Vision 8 ${{ steps.compute_tag.outputs.next_tag }} Release
          draft: false
          prerelease: true

  changelogger:
    runs-on: ubuntu-latest
    needs: create-release

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Unshallow
        run: git fetch --prune --unshallow

      # Figure out what the CURRENT tag should be
      - id: compute_tag
        uses: craig-day/compute-tag@v10
        with:
          github_token: ${{ github.token }}
          version_scheme: semantic
          version_type: patch

      - name: save Changelog
        id: PREVIOUS_version
        run: |
          IFS='.' read -ra my_array <<< "${{ steps.compute_tag.outputs.next_tag }}"
          echo "CURRENT=${my_array[0]:1}.${my_array[1]}.$((${my_array[2]} - 1))" >> $GITHUB_ENV
          echo "PREVIOUS=${my_array[0]:1}.${my_array[1]}.$((${my_array[2]} - 2))" >> $GITHUB_ENV

      - name: Create Changelog
        id: changelog
        uses: jimschubert/beast-changelog-action@v1
        with:
          FROM: v${{ env.PREVIOUS }}
          TO: v${{ env.CURRENT }}

      - name: View Changelog
        run: cat .github/CHANGELOG.md

      #- name: save Changelog
      #  id: log
      #  run: |
      #    #REPORT="$(cat .github/CHANGELOG.md)"
      #    echo "REPORT=$(cat .github/CHANGELOG.md)" >> $GITHUB_ENV
          
          # REPORT="${REPORT//'%'/'%25'}"
          # REPORT="${REPORT//$'\n'/'$LS'}"
          # REPORT="${REPORT//$'\r'/'$LS'}"
          # echo "REPORT=$REPORT" >> $GITHUB_ENV
          

      # Setup dotnet 5.0.x
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      - name: Use Node.js
        uses: actions/setup-node@v1

      - name: Build
        run: |
          sed -i 's/0.0.0/${{env.CURRENT}}/g' Content/bios.json
          sed -i 's/0.0.0/${{env.CURRENT}}/g' PixelVision8.CoreDesktop.csproj
          cd .gulp
          npm install
          npm install gulp -g
          echo $VERSION
          gulp

      # Update the release with the change log
      - name: Update Release
        id: update_release
        uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allow_override: true
          tag: v${{env.CURRENT}}
          gzip: false
          body: > 
            ${ cat .github/CHANGELOG.md }
          files: >
            PixelVision8-v${{env.CURRENT}}-macOS.zip:Releases/PixelVision8-macOS.zip
            PixelVision8-v${{env.CURRENT}}-win.zip:Releases/PixelVision8-win.zip
            PixelVision8-v${{env.CURRENT}}-linux.zip:Releases/PixelVision8-linux.zip
